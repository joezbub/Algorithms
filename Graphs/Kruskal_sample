#include<bits/stdc++.h>
using namespace std;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define pb push_back
#define mp make_pair
#define Pi 3.14159265358979

typedef long long ll;
typedef vector <int> vi;
typedef vector<ll> vl;
typedef pair <int, int> pi;
typedef pair <ll, int> pl;
typedef pair <double, double> pd;

//change these according to prob constraints
const int INF = 1000000000;
const int MAX = 100005;
const int MAX1 = 2007;
const int MAX2 = 4007;
const int LEN = 21;
const int BASE = 1000000000;
const double EPS = 1e-7;
const int MOD = 1234567891;
//g++ -std=c++11 your_file.cpp -o your_program

int n, arr[505][505], dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0}, sz[505][505];
pi par[505][505];

pi getroot(pi tmp){
    while (tmp.first != par[tmp.first][tmp.second].first || tmp.second != par[tmp.first][tmp.second].second){
        par[tmp.first][tmp.second] = par[par[tmp.first][tmp.second].first][par[tmp.first][tmp.second].second];
        int t = tmp.first;
        tmp.first = par[tmp.first][tmp.second].first;
        tmp.second = par[t][tmp.second].second;
    }
    return tmp;
}

void join(pi a, pi b){
    pi r1 = getroot(a);
    pi r2 = getroot(b);
    if (r1 == r2) return;
    if (sz[r1.first][r1.second] < sz[r2.first][r2.second]){
        sz[r2.first][r2.second] += sz[r1.first][r1.second];
        par[r1.first][r1.second] = {r2.first, r2.second};
    }
    else{
        sz[r1.first][r1.second] += sz[r2.first][r2.second];
        par[r2.first][r2.second] = {r1.first, r1.second};
    }
}

bool conn(pi a, pi b){
    pi tmp = getroot(a);
    pi tmp1 = getroot(b);
    if (tmp.first == tmp1.first && tmp1.second == tmp.second) return true;
    else return false;
}

int mysize(pi x) {
    pi tmp = getroot(x);
    return sz[tmp.first][tmp.second];
}

int main(void){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	ifstream in("");
	ofstream out("");
    cin >> n;
    REP(i, n){
        REP(j, n) cin >> arr[i][j];
    }
    vector<pair<int, pair<pi, pi> > > edges;
    REP(i, n){
        REP(j, n){
            REP(k, 4){
                int r = i + dx[k], c = j + dy[k];
                if (r >= 0 && r < n && c >= 0 && c < n){
                    edges.pb({abs(arr[r][c] - arr[i][j]), {{i, j}, {r, c}}});
                }
            }
        }
    }
    REP(i, n) REP(j, n) sz[i][j] = 1;
    REP(i, n) REP(j, n) par[i][j] = {i, j};
    int res = 0, ct = 0;
    sort(ALL(edges));
    REP(i, SZ(edges)){
        pi f = edges[i].second.first;
        pi s = edges[i].second.second;
        if (!conn(f, s)){
            res = max(res, edges[i].first);
            join(f, s);
        }
        if (mysize(edges[i].second.first) >= pow(n, 2) / 2) {
            cout << res << endl;
            return 0;
        }
    }
	return 0;
}
